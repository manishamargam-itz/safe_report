generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReportStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  DISMISSED
}

enum ReportType {
  EMERGENCY
  NON_EMERGENCY
}

model Report {
  id          String       @id @default(cuid())
  reportId    String       @unique
  type        ReportType
  title       String
  description String
  location    String?
  latitude    Float?
  longitude   Float?
  image       String?
  status      ReportStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([reportId])
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  name           String
  password       String
  role           Role             @default(USER)
  ContactMessage ContactMessage[]
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

// Add to your schema.prisma
model Resource {
  id          String           @id @default(cuid())
  title       String
  description String
  url         String
  category    ResourceCategory
  phone       String?
  isEmergency Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum ResourceCategory {
  EMERGENCY_CONTACT
  SAFETY_GUIDE
  LEGAL_AID
  COMMUNITY
  MENTAL_HEALTH
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommunityMeeting {
  id        String     @id @default(cuid())
  title     String
  time      DateTime
  location  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  feedbacks Feedback[]
}

model Feedback {
  id        String           @id @default(cuid())
  meetingId String
  meeting   CommunityMeeting @relation(fields: [meetingId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime         @default(now())
}
